from Tree import TreeNode#Given root, node1, node2#Return node1 and node2's lowest Common Ancestordef lowestCommonAncestorH(root, node1, node2):    LCA = root    if node1.val > root.val and node2.val > root.val:        LCA = lowestCommonAncestorH(root.right, node1, node2)    if node1.val < root.val and node2.val < root.val:        LCA = lowestCommonAncestorH(root.left, node1, node2)    return LCAdef lowestCommonAncestor(root, node1, node2):    if node1.val in root.preTraversePrint() and node2.val in root.preTraversePrint():        LCA = lowestCommonAncestorH(root, node1, node2)        return LCA    else:        return Nonedef lowestCommonAncestorV2(root, node1, node2):    if root is None:        return None        #If root is either node1 or node2, we will use findNode() to find the other    #if found, root is the LCA    #if not, return none    if root.val == node1.val:        findNode2 = findNode(root, node2)        if findNode2:            return root        else:            return None                if root.val == node2.val:              findNode1 = findNode(root, node1)        if findNode2:            return root        else:            return None    #if node1, node2 are both greater or less than root, do recursion    #else, use findNode()    #we look for one on root.left, another one on root.right    if root.val < node1.val and root.val < node2.val:        return lowestCommonAncestorV2(root.right, node1, node2)    elif root.val > node1.val and root.val > node2.val:        return lowestCommonAncestorV2(root.left, node1, node2)     else:        findNode1 = findNode(root, node1)        findNode2 = findNode(root, node2)        if findNode1 and findNode2:            return root        else:            return None                   def findNode(root, node):    if root is None:        return False    if root.val == node.val:        return True    elif root.val < node.val:        return findNode(root.right, node)    else:        return findNode(root.left, node)    node5 = TreeNode(5)node2 = TreeNode(2)node8 = TreeNode(8)node9 = TreeNode(9)node1 = TreeNode(1)node4 = TreeNode(4)node3 = TreeNode(3)node5.left = node2node5.right = node8node8.right = node9node2.left = node1node2.right = node4node4.left = node3node0 = TreeNode(0)#   5# 2   8#1 4# 3print(node5.levelOrderTraverse())result = lowestCommonAncestorV2(node5, node1, node8)if result is None:    print("Not found")else:    print(result.val)